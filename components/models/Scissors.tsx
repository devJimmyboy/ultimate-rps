/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader"

type GLTFResult = GLTF & {
  nodes: {
    Cylinder001_1: THREE.Mesh
    Cylinder001_2: THREE.Mesh
    Cylinder: THREE.Mesh
    Cylinder004: THREE.Mesh
    Cylinder004_1: THREE.Mesh
  }
  materials: {
    Metal: THREE.MeshStandardMaterial
    Plastic: THREE.MeshStandardMaterial
    ["Material.001"]: THREE.MeshStandardMaterial
    ["Metal.001"]: THREE.MeshStandardMaterial
    ["Plastic.001"]: THREE.MeshStandardMaterial
  }
}

export default React.forwardRef<THREE.Group>((props: JSX.IntrinsicElements["group"], ref) => {
  const { nodes, materials } = useGLTF("/models/Scissors.glb") as GLTFResult
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.Cylinder001_1.geometry} material={materials.Metal} />
      <mesh castShadow receiveShadow geometry={nodes.Cylinder001_2.geometry} material={materials.Plastic} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={materials["Material.001"]}
        position={[0, 0, 0.02]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={[0.27, 0.27, 0.27]}
      />
      <group position={[0, 0, -0.28]} rotation={[-Math.PI, 0, -Math.PI]}>
        <mesh castShadow receiveShadow geometry={nodes.Cylinder004.geometry} material={materials["Metal.001"]} />
        <mesh castShadow receiveShadow geometry={nodes.Cylinder004_1.geometry} material={materials["Plastic.001"]} />
      </group>
    </group>
  )
})

useGLTF.preload("/models/Scissors.glb")
